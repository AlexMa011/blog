<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小世界</title>
  
  <subtitle>Alex Ma&#39;s Blog</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://alexma011.github.io/blog/"/>
  <updated>2018-09-25T12:03:50.999Z</updated>
  <id>https://alexma011.github.io/blog/</id>
  
  <author>
    <name>Alex Ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>卷积BP初探</title>
    <link href="https://alexma011.github.io/blog/2018/09/25/%E5%8D%B7%E7%A7%AFBP%E5%88%9D%E6%8E%A2/"/>
    <id>https://alexma011.github.io/blog/2018/09/25/卷积BP初探/</id>
    <published>2018-09-25T12:01:11.000Z</published>
    <updated>2018-09-25T12:03:50.999Z</updated>
    
    <content type="html"><![CDATA[<h4 id="卷积BP初探"><a href="#卷积BP初探" class="headerlink" title="卷积BP初探"></a>卷积BP初探</h4><h5 id="再看BP"><a href="#再看BP" class="headerlink" title="再看BP"></a>再看BP</h5><p>假设A, B, C都是矩阵且 A=BC, 这里是矩阵乘法，那么有$a_{ij} = \sum_k b_{ik} c_{kj}$ ，若有一标量函数 f(A)，记$(\frac{df}{dA})<em>{ij}  =  \frac{df}{da</em>{ij}}$。</p><p>若要求$\frac{df}{dB}$，则有</p><p>$$(\frac{df}{dB})<em>{ik} = \frac{df}{db</em>{ik}} = \sum_j\frac{df}{da_{ij}}\frac{da_{ij}}{db_{ik}} = \sum_j\frac{df}{da_{ij}} c_{kj} = \sum_j\frac{df}{da_{ij}}  c’_{jk} $$</p><p>其中 $c_{kj}=c’_{jk}$，可以知道C‘矩阵是C矩阵的转置，所以有$\frac{df}{dB}=\frac{df}{dA}C^T$，类似地，有$\frac{df}{dC}=B^T\frac{df}{dA}$。</p><h5 id="卷积与反卷积"><a href="#卷积与反卷积" class="headerlink" title="卷积与反卷积"></a>卷积与反卷积</h5><p>这里推荐一个<a href="https://github.com/vdumoulin/conv_arithmetic" target="_blank" rel="noopener">卷积和反卷积的图示</a>，里面可以直观的看到什么是卷积，什么是反卷积，结合图示，我们希望写出卷积和反卷积的数学表达。</p><p>卷积：输入是X，卷积核是W，卷积核的高和宽分别是h和w，输出是Y，stride是s，padding是p，则有</p><p>$$y_{ij} = \sum_{a,b}w_{ab}x_{i<em>s-p+a,j</em>s-p+b}$$</p><p>如果x的下标不存在的话，则取其值为0。</p><p>反卷积：输入是X，卷积核是W，卷积核的高和宽分别是h和w，输出是Y，stride是s，padding是p，则有</p><p>$$y_{ij}=\sum_{a,b}w_{ab}x_{\frac{1}{s}[i-(w-1)+a],\frac{1}{s}[j-(h-1)+b]}$$</p><p>同样的，如果x的下标不存在的话，则取其值为0。</p><h5 id="卷积的BP"><a href="#卷积的BP" class="headerlink" title="卷积的BP"></a>卷积的BP</h5><p>对上述的卷积，我们引入一个对称的卷积核W’，满足$w’<em>{w-1-a,h-1-b}=w</em>{a,b}$我们有</p><p>$$\frac{dl}{dx_{ij}} = \sum_{a,b}w_{a,b}\frac{dl}{dy_{\frac{1}{s}[i-a+p],\frac{1}{s}[j-b+p]}} =\sum_{a,b}w’<em>{a,b}\frac{dl}{dy</em>{\frac{1}{s}[i+p-(w-1)+a],\frac{1}{s}[j+p-(h-1)+b]}} $$</p><p>对比之前的反卷积公式，可以看出卷积的BP是个反卷积的过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;卷积BP初探&quot;&gt;&lt;a href=&quot;#卷积BP初探&quot; class=&quot;headerlink&quot; title=&quot;卷积BP初探&quot;&gt;&lt;/a&gt;卷积BP初探&lt;/h4&gt;&lt;h5 id=&quot;再看BP&quot;&gt;&lt;a href=&quot;#再看BP&quot; class=&quot;headerlink&quot; title=&quot;再
      
    
    </summary>
    
    
      <category term="deep learning" scheme="https://alexma011.github.io/blog/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>PyInstaller或PyQt的坑</title>
    <link href="https://alexma011.github.io/blog/2018/07/16/PyInstaller%E6%88%96PyQt%E7%9A%84%E5%9D%91/"/>
    <id>https://alexma011.github.io/blog/2018/07/16/PyInstaller或PyQt的坑/</id>
    <published>2018-07-16T05:09:23.000Z</published>
    <updated>2018-07-16T05:33:24.590Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用PyInstaller做个小界面，里面用到了PyQt和OpenCv，其中遇到了很多坑，也不算都解决了吧，总之避过了，最后运行成功。</p><ol><li>Qt的版本问题</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ModuleNotFoundError: No module named 'PySide'</span><br><span class="line">qtpy.PythonQtError: No Qt bindings could be found</span><br></pre></td></tr></table></figure><p>当遇到这两个错误提示的时候，可能就是Qt的版本问题了</p><p>这个是个大坑，系统如果安装Qt的话是一个版本，然后PyQt中的Core可能是另一个版本，如果要用Conda的话Conda还有个自带的Qt版本。。。最后的解决办法是删掉系统安装的Qt或者让PyInstaller只识别到Conda中的Qt，还记得装PyQt时候要和Conda的Qt版本相兼容。利用<code>qtdiag</code>可以查看Qt的版本，利用下面命令查看PyQt的版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QT_VERSION_STR</span><br><span class="line">print(QT_VERSION_STR)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>opencv的版本问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">File "/Users/alex/.pyenv/versions/anaconda3-5.2.0/envs/labelme/lib/python3.6/site-packages/cv2/__init__.py", line 3, in &lt;module&gt;</span><br><span class="line">       from .cv2 import *</span><br><span class="line">File "/Users/alex/.pyenv/versions/anaconda3-5.2.0/envs/labelme/lib/python3.6/site-packages/PyInstaller/loader/pyimod03_importers.py", line 714, in load_module</span><br><span class="line">       module = loader.load_module(fullname)</span><br><span class="line">ImportError: dlopen(/var/folders/kc/wb0c3crx2_g9r10n4vjywlhc0000gn/T/_MEIo9bwqe/cv2.cv2.so, 2): Symbol not found: __ZN10QByteArray11shared_nullE</span><br><span class="line">     Referenced from: /var/folders/kc/wb0c3crx2_g9r10n4vjywlhc0000gn/T/_MEIo9bwqe/QtTest</span><br></pre></td></tr></table></figure></li></ol><p>上面是opencv最新版本的报错，opencv自从3.3.0.9之后就会和不知道Qt还是Pyinstaller不对付，所以在Conda里面装这个版本。</p><ol start="3"><li>最好使用<code>pyhton -m PyInstaller</code>而不是直接使用<code>pyisntaller</code>，后者在多版本的时候可能有时候会有问题，另外注意大小写。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在用PyInstaller做个小界面，里面用到了PyQt和OpenCv，其中遇到了很多坑，也不算都解决了吧，总之避过了，最后运行成功。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Qt的版本问题&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="python" scheme="https://alexma011.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>终端使用socks5代理</title>
    <link href="https://alexma011.github.io/blog/2018/07/16/%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8socks5%E4%BB%A3%E7%90%86/"/>
    <id>https://alexma011.github.io/blog/2018/07/16/终端使用socks5代理/</id>
    <published>2018-07-16T03:26:59.000Z</published>
    <updated>2018-09-25T12:05:41.754Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>假设ss的端口是7070，设置sock5代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias proxy='export all_proxy=socks5://127.0.0.1:7070'</span><br><span class="line">alias unproxy='unset all_proxy'</span><br></pre></td></tr></table></figure></li><li><p>为GitHub设置代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 'socks5://127.0.0.1:7070'</span><br><span class="line">git config --global https.proxy 'socks5://127.0.0.1:7070'</span><br></pre></td></tr></table></figure></li><li><p>pip需要安装pysocks</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pysocks</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;假设ss的端口是7070，设置sock5代理&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="proxy" scheme="https://alexma011.github.io/blog/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>处理国家数据</title>
    <link href="https://alexma011.github.io/blog/2018/02/14/%E5%A4%84%E7%90%86%E5%9B%BD%E5%AE%B6%E6%95%B0%E6%8D%AE/"/>
    <id>https://alexma011.github.io/blog/2018/02/14/处理国家数据/</id>
    <published>2018-02-14T02:32:40.000Z</published>
    <updated>2018-02-14T03:25:36.342Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas在处理特征数据时（而不是图像文字这种raw data）时很有用，下面分享一个基于pandas和pygal的各个国家人均GDP可视化的python代码。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> geonamescache <span class="keyword">import</span> GeonamesCache</span><br><span class="line"><span class="keyword">from</span> geonamescache.mappers <span class="keyword">import</span> country</span><br><span class="line"><span class="keyword">from</span> pygal.maps.world <span class="keyword">import</span> World</span><br><span class="line">mapper = country(from_key=<span class="string">'name'</span>, to_key=<span class="string">'iso'</span>)</span><br></pre></td></tr></table></figure><p>mapper是一个将国家名映射到简称的函数，比如<code>&#39;ES&#39;=mapper(&#39;Spain&#39;)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pop = pd.read_csv(<span class="string">'pop.csv'</span>,index_col=<span class="number">0</span>)</span><br><span class="line">gdp = pd.read_csv(<span class="string">'gdp.csv'</span>,index_col=<span class="number">0</span>)</span><br><span class="line">pop_2016 = pop[[<span class="string">'2016'</span>]]</span><br><span class="line">gdp_2016 = gdp[[<span class="string">'2016'</span>]]</span><br><span class="line">pop_2016 = pop_2016.rename(columns=&#123;<span class="string">'2016'</span>:<span class="string">'pop_2016'</span>&#125;)</span><br><span class="line">gdp_2016 = gdp_2016.rename(columns=&#123;<span class="string">'2016'</span>:<span class="string">'gdp_2016'</span>&#125;)</span><br><span class="line">all_2016 = pd.concat([pop_2016,gdp_2016],axis=<span class="number">1</span>).dropna(axis=<span class="number">0</span>,how=<span class="string">'any'</span>)</span><br></pre></td></tr></table></figure><a href="/blog/2018/02/14/处理国家数据/pop.csv" title="pop.csv">pop.csv</a>和<a href="/blog/2018/02/14/处理国家数据/gdp.csv" title="gdp.csv">gdp.csv</a>分别是国家人口和人均GDP的数据，我们把这两个表合并成一个表，这和数据库的操作很类似，pandas最好的就是可以处理一下异常数据，空缺数据。<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">selected = all_2016.query(<span class="string">'gdp_2016 &gt; 8000'</span> )</span><br><span class="line">selected_gdp = selected[[<span class="string">'gdp_2016'</span>]]</span><br><span class="line">country_map = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> selected_gdp.index:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        country_map[country] = mapper(country).lower()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">selected_gdp = selected_gdp.rename(index=country_map).to_dict()[<span class="string">'gdp_2016'</span>]</span><br></pre></td></tr></table></figure><p>这一步是把人均GDP大于8000美金的国家挑选出来，最后一步就是可视化了，这里我们用比较简单粗糙的pygal提供的接口，更好的可以选择basemap。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">worldmap_chart = World()</span><br><span class="line">worldmap_chart.title = <span class="string">'GDP per capita'</span></span><br><span class="line">worldmap_chart.add(<span class="string">'In 2016'</span>, selected_gdp)</span><br><span class="line">worldmap_chart.render_in_browser()</span><br></pre></td></tr></table></figure><p>最后的效果图：<img src="/blog/2018/02/14/处理国家数据/re.svg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pandas在处理特征数据时（而不是图像文字这种raw data）时很有用，下面分享一个基于pandas和pygal的各个国家人均GDP可视化的python代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://alexma011.github.io/blog/tags/python/"/>
    
      <category term="data" scheme="https://alexma011.github.io/blog/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>好用的手机应用</title>
    <link href="https://alexma011.github.io/blog/2017/11/04/%E5%A5%BD%E7%94%A8%E7%9A%84%E6%89%8B%E6%9C%BA%E5%BA%94%E7%94%A8/"/>
    <id>https://alexma011.github.io/blog/2017/11/04/好用的手机应用/</id>
    <published>2017-11-04T03:22:50.000Z</published>
    <updated>2018-02-14T03:16:42.218Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个介绍我觉得十分好用的一些iOS和Android应用的地方。</p><ul><li>Tydlig: 中文名叫有数，我认为最好用的计算器，有链接的功能，更重要的是可以在一片空白的区域写出计算的式子，就像打草稿是一样的，目前只在iOS平台上可以使用。Android上的替代品目前最靠近的叫ACalc。</li><li>Wolfram Alpha：神器，不用多说，不仅仅是一个wiki一样的百科全书，最主要的是一些复杂的数学计算，当你像我一样老是忘记一些复杂的专业定义时，Wolfram Alpha是你最好的选择。iOS和Android上都有，需要分别付费。</li><li>触宝输入法：TouchPal，和谷歌拼音是唯二支持中英文滑屏的输入法，并且有剪贴板的功能，缺点是广告太多，主题太丑。如果对中文滑屏输入没有要求，可以选择swiftkey。</li><li>IFTTT：也是神器，可以集成很多服务，结合RSS订阅更加强大。我订阅的有筛选微博，提示温度，重要新闻，限免应用等一系列服务。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一个介绍我觉得十分好用的一些iOS和Android应用的地方。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tydlig: 中文名叫有数，我认为最好用的计算器，有链接的功能，更重要的是可以在一片空白的区域写出计算的式子，就像打草稿是一样的，目前只在iOS平台上可以使用。Android上的
      
    
    </summary>
    
      <category term="小应用" scheme="https://alexma011.github.io/blog/categories/%E5%B0%8F%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="ios" scheme="https://alexma011.github.io/blog/tags/ios/"/>
    
      <category term="android" scheme="https://alexma011.github.io/blog/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>下载网页中的图片</title>
    <link href="https://alexma011.github.io/blog/2017/10/08/%E4%B8%8B%E8%BD%BD%E7%BD%91%E9%A1%B5%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/"/>
    <id>https://alexma011.github.io/blog/2017/10/08/下载网页中的图片/</id>
    <published>2017-10-08T09:32:59.000Z</published>
    <updated>2018-02-14T03:18:07.580Z</updated>
    
    <content type="html"><![CDATA[<p>今天从wordpress搬运网站，发现wordpress里面的图片不提供批量下载，所以就自己写了个从html中直接下载一些图片的python小脚本：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> wget</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'example.html'</span>)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">p = re.compile(<span class="string">'img.+?src="(http.+?)"'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">imgs = p.findall(line)</span><br><span class="line"><span class="keyword">if</span>(len(imgs)!=<span class="number">0</span>):</span><br><span class="line">      <span class="keyword">for</span> image <span class="keyword">in</span> imgs:</span><br><span class="line">    filename = wget.download(image)</span><br><span class="line">    print(filename)</span><br></pre></td></tr></table></figure><p>又一个问题是其中用到的wget插件不支持断点续传等操作，不过一般网络稳定时没问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天从wordpress搬运网站，发现wordpress里面的图片不提供批量下载，所以就自己写了个从html中直接下载一些图片的python小脚本：&lt;/p&gt;
    
    </summary>
    
      <category term="小应用" scheme="https://alexma011.github.io/blog/categories/%E5%B0%8F%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="python" scheme="https://alexma011.github.io/blog/tags/python/"/>
    
      <category term="html" scheme="https://alexma011.github.io/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>pytorch演练1:自制数据集的多标签训练</title>
    <link href="https://alexma011.github.io/blog/2017/06/12/pytorch1/"/>
    <id>https://alexma011.github.io/blog/2017/06/12/pytorch1/</id>
    <published>2017-06-12T08:38:01.000Z</published>
    <updated>2018-07-16T05:31:14.027Z</updated>
    
    <content type="html"><![CDATA[<h4 id="制作自己的数据集"><a href="#制作自己的数据集" class="headerlink" title="制作自己的数据集"></a>制作自己的数据集</h4><p>pytorch有很多自制数据集的方法，最简单的方法是新建一个数据集文件夹<code>/data</code>，然后在其下建立两个文件夹一个<code>/train</code>，一个<code>/val</code>。这两个文件夹中分别给每一类建立一个新的文件夹，例如<code>/train/cat</code>、<code>/train/dog</code>、<code>/val/cat</code>、<code>/val/dog</code>等等。然后利用pytorch的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;制作自己的数据集&quot;&gt;&lt;a href=&quot;#制作自己的数据集&quot; class=&quot;headerlink&quot; title=&quot;制作自己的数据集&quot;&gt;&lt;/a&gt;制作自己的数据集&lt;/h4&gt;&lt;p&gt;pytorch有很多自制数据集的方法，最简单的方法是新建一个数据集文件夹&lt;code&gt;/dat
      
    
    </summary>
    
      <category term="深度学习" scheme="https://alexma011.github.io/blog/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="pytorch" scheme="https://alexma011.github.io/blog/tags/pytorch/"/>
    
      <category term="deep learning" scheme="https://alexma011.github.io/blog/tags/deep-learning/"/>
    
  </entry>
  
</feed>
